#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# config
LP_DIR=`cd $(dirname $0); cd ..; pwd`

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIRS="bin include lib .heroku"
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"

# TODO There's probably a better way to bootstrap miniconda, we should do that
MINICONDA_VERSION="3.6.0"
MINICONDA_FILENAME="Miniconda-$MINICONDA_VERSION-Linux-x86_64.sh"
MINICONDA_URL="http://repo.continuum.io/miniconda/$MINICONDA_FILENAME"

wget $MINICONDA_URL
./$MINICONDA_FILENAME -b -p .

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

virtualenv() {
  python - "$@" <<EOF
import sys
sys.path.insert(0, "$ROOT_DIR/src/virtualenv-1.6.4")
import virtualenv
virtualenv.main()
EOF
}

cd $BUILD_DIR

# reject a non-packaged Django app
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# warn a checked-in virtualenv
if [ -d "lib" ] || [ -d "bin" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# reject a conflicting checked-in virtualenv
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi


# copy artifacts out of cache if exists
mkdir -p $CACHE_DIR
for dir in $VIRTUALENV_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

echo "-----> Preparing virtualenv version $(virtualenv --version)"
virtualenv --no-site-packages . | indent

# create set-aside .heroku folder.
rm -rf .heroku
mkdir .heroku

# if pylibmc within requirements, use vendored libmemcached
if [ -f requirements.txt ]; then
  if (grep -Fxiq "pylibmc" requirements.txt) || (grep -Fiq "pylibmc=" requirements.txt)
  then
    echo "-----> Noticed pylibmc. Bootstrapping libmemcached."
    cd .heroku

    if [ -d "vendor/lib/sasl2" ]; then
      export LIBMEMCACHED=$(pwd)/vendor
    else
      curl -s -L -O $VENDORED_MEMCACHED
      tar -zxvf vendor-libmemcached.tar.gz > /dev/null
      rm vendor-libmemcached.tar.gz
      export LIBMEMCACHED=$(pwd)/vendor
    fi

    export LIBMEMCACHED=$(pwd)/vendor
    cd ..
  fi
fi

if [ -f requirements.txt ]; then
  if (grep -Fiq "hg+" requirements.txt) then
    PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE bin/pip install --use-mirrors mercurial | indent
  fi
fi

source bin/activate 
pip install sphinx --use-mirrors
pip install oauth2==1.5.211 Flask==0.8 Flask-OpenID==1.0.1 python-openid==2.2.5 --use-mirrors
bin/conda install -p . -c continuumio continuum-sphinx-theme

CONF_FILE=$(find . -name 'conf.py' | head -1)
PROJECT=$(dirname $CONF_FILE)
pushd $PROJECT/..
make dirhtml
popd

rm -rf $CACHE_DIR/.heroku
mkdir -p $CACHE_DIR/.heroku
mkdir $ROOT_DIR/src/app/templates
mv $ROOT_DIR/src/app $CACHE_DIR/.heroku/
mv $PROJECT/_build/dirhtml/* $CACHE_DIR/.heroku/app/templates/
cp -R $CACHE_DIR/.heroku .

if [ -f requirements.txt ]; 
then
  echo "-----> Installing dependencies using pip version $(bin/pip --version | awk '{print $2}')"
  PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE bin/pip install --use-mirrors -r requirements.txt | indent
fi

set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# repack cache
mkdir -p $CACHE_DIR
for DIR in $VIRTUALENV_DIRS ; do
  rm -rf $CACHE_DIR/$DIR
  cp -R $DIR $CACHE_DIR/$DIR
done
rm -rf $CACHE_DIR/.heroku
cp -R .heroku $CACHE_DIR/.heroku

